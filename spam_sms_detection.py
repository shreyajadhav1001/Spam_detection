# -*- coding: utf-8 -*-
"""Spam_SMS_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hdw8y8A2Sdc-YoGQue49VH2uR15tToPU
"""

from google.colab import files

"""Loading and Exploring Dataset"""

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

#importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from keras.models import Model
from keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding
from keras.optimizers import RMSprop
from keras.preprocessing.text import Tokenizer
from keras.preprocessing import sequence
from keras.utils import pad_sequences
from keras.utils import to_categorical
from keras.callbacks import EarlyStopping

df = pd.read_csv('spam.csv',delimiter=',',encoding='latin-1')
df = df[["v1","v2"]]
df.head()

df.describe()

df.groupby('v1').describe().T

"""Data Visualisation"""

# get all the ham and spam emails
ham_msg = df[df.v1 =='ham']
spam_msg = df[df.v1=='spam']

# For ham and spam messages, create numpy list to visualize using wordcloud
ham_msg_text = " ".join(ham_msg.v2.to_numpy().tolist())
spam_msg_text = " ".join(spam_msg.v2.to_numpy().tolist())

# Commented out IPython magic to ensure Python compatibility.
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
# %matplotlib inline

# wordcloud of ham messages
ham_msg_cloud = WordCloud(width =520, height =260, stopwords=STOPWORDS,max_font_size=50,
                          background_color ="black", colormap='Blues').generate(ham_msg_text)
plt.figure(figsize=(16,10))
plt.imshow(ham_msg_cloud, interpolation='bilinear')
plt.axis('off') # turn off axis
plt.show()

# wordcloud of spam messages
spam_msg_cloud = WordCloud(width =520, height =260, stopwords=STOPWORDS,max_font_size=50,
                          background_color ="black", colormap='Blues').generate(spam_msg_text)
plt.figure(figsize=(16,10))
plt.imshow(spam_msg_cloud, interpolation='bilinear')
plt.axis('off') # turn off axis
plt.show()

# Percentage of spam messages
(len(spam_msg)/len(ham_msg))*100

"""Prepare train test data and Data  pre-processing"""

X = df.v2
Y = df.v1
le = LabelEncoder()
Y = le.fit_transform(Y)
Y = Y.reshape(-1,1)

"""Train Test Split"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.15)

"""Tokenizing"""

max_words = 1000
max_len = 150
tok = Tokenizer(num_words=max_words)
tok.fit_on_texts(X_train)

"""Sequencing and Padding"""

sequences = tok.texts_to_sequences(X_train)
sequences_matrix =pad_sequences(sequences,maxlen=max_len)

"""Train the model"""

def RNN():
    inputs = Input(name='inputs',shape=[max_len])
    layer = Embedding(max_words,50,input_length=max_len)(inputs)
    layer = LSTM(64)(layer)
    layer = Dense(256,name='FC1')(layer)
    layer = Activation('relu')(layer)
    layer = Dropout(0.5)(layer)
    layer = Dense(1,name='out_layer')(layer)
    layer = Activation('sigmoid')(layer)
    model = Model(inputs=inputs,outputs=layer)
    return model

model = RNN()
model.summary()
model.compile(loss='binary_crossentropy',optimizer=RMSprop(),metrics=['accuracy'])

model.fit(sequences_matrix,Y_train,batch_size=128,epochs=10,
          validation_split=0.2,callbacks=[EarlyStopping(monitor='val_loss',min_delta=0.0001)])

test_sequences = tok.texts_to_sequences(X_test)
test_sequences_matrix = pad_sequences(test_sequences,maxlen=max_len)

accr = model.evaluate(test_sequences_matrix,Y_test)

print('Test set\n  Loss: {:0.3f}\n  Accuracy: {:0.3f}'.format(accr[0],accr[1]))

Testing_context = ["time today"]

txts = tok.texts_to_sequences(Testing_context)
txts = pad_sequences(txts, maxlen=max_len)

preds = model.predict(txts)
print(preds)

!pip install anvil-uplink

import anvil.server

anvil.server.connect("server_5276RIM3ST2N42RY3TMPEO5R-7EDV5MRI2FU2T4VD")

@anvil.server.callable
def detect_spam(Testing_context):
  Testing_context = ["win free mobile"]
  txts = tok.texts_to_sequences(Testing_context)
  txts = pad_sequences(txts, maxlen=max_len)
  preds = model.predict(txts)
  if(preds <= 0.50) :
      return "not spam"
  else:
      return "spam"